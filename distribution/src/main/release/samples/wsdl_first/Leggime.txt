============  generare code da src/main/resources/CustomerService.wsdl  in src/main/generated   =======

cd   /Users/glocon/Miei/local_git/CXF_forked/cxf/distribution/src/main/release/samples/wsdl_first

mvn generate-sources

Se non dovesse funzionare:

mvn clean install

Il codice generato e' in :wsdl_first/src/main/generated


=============  Lanciare Server ===========

1)Non Spring [jaxws-api-2.3.0.jar+cxf-rt-frontend-jaxws] jetty transport cxf-rt-transports-http-jetty [http://localhost:9090/CustomerServicePort]

mvn -Pserver 

OSS:Spring e' inizializzato comunque in SpringBusFactory.createApplicationContext()!!


2)Spring (server-applicationContext.xml) jetty transport cxf-rt-transports-http-jetty [http://localhost:9090/CustomerServicePort]  
mvn -Pserver-spring



3)Non Spring netty transport cxf-rt-transports-http-netty-server [http://localhost:9090/CustomerServicePort]

mvn -Pserver-netty

4)Tomcat 7 (cxf-servlet.xml) [http://localhost:8080/wsdl_first/services/CustomerServicePort?wsdl]

mvn tomcat7:run



=============  Lanciare Client ===========

1)Non Spring standard transport cxf-rt-transports-http {URLConnectionHTTPConduit} [CustomerServiceClient.java chiamata da command line]

mvn -Pclient

PS:Ad ogni modo internamente Spring viene usato da cxf guts ... quindi Spring e' sempre usato comunque. 
OSS:Spring e' inizializzato comunque in SpringBusFactory.createApplicationContext()!!


2)Non Spring netty transport cxf-rt-transports-http-netty-client [CustomerServiceClient.java chiamata da command line]
mvn -Pclient-netty

Come 1, soltanto usa dependency cxf-rt-transports-http-netty-client.


3)Spring standard transport  cxf-rt-transports-http [CustomerServiceSpringClient.java chiamata da command line]
mvn -Pclient-spring


====  Scelta del transport: ====
Il transport e' settato in SoapMessage [e' una map] con key= org.apache.cxf.transport.Conduit  da AbstractConduitSelector.getSelectedConduit().
Il particolare trasporto e' deciso in HTTPTransportFactory.findFactory() [f = bus.getExtension(HTTPConduitFactory.class);]
Se esiste uno spring bean di tipo org.apache.cxf.transport.http.HTTPConduitFactory  , questo viene usato come factory x la Conduit  factory.createConduit() 
altrimenti  conduit = new URLConnectionHTTPConduit  [-Pclient].

Nel caso client-netty, tale bean e' NettyHttpConduitFactory ed e' registrato come bus-extension Spring-bean in cxf-rt-transports-http-netty-client.jar/META-INF/cxf/bus-ectensions.txt.
E' scoperta come bus-extension come bus extension in ExtensionManagerImpl.load(String resource, ClassLoader l)  ed instanziata in ExtensionManagerImpl.loadAndRegister(Extension e)








