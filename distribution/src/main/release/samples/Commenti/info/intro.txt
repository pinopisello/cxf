In questo folder "samples" ci sono tutti gli esempi forniti da CXF.

Ogni progetto su cui ho fatto prove/ho studiato ha un file "leggime.txt"

====================  Argomenti importanti:  ===============================

Inizializzazione Spring =>wsdl_first/Spring-bean-setup.txt  


=============		wsdl_first    ==================
Come , a partire da un wsdl, costruire server e client , Spring e non spring based, con diversi transports.

Server:Non Spring jetty transport   [-Pserver]         usa javax.xml.ws.Endpoint.publish(implementor)
	   Spring  jetty                [-Pserver-spring]  usa server-applicationContext.xml
	   Non Spring netty             [-Pserver-netty]
	   Tomcat 7                     [tomcat7:run]
	   
	   
Client:Non Spring standard transport    [-Pclient]
	   Non Spring netty                 [-Pclient-netty]
	   Spring jetty standard transport  [-Pclient-spring]



=============		java_first_jaxws    ==================
Come , a partire da una interfaccia SIE demo.hw.server.HelloWorld.java, costruire server e client .
Nessuna classe e' generata da generate-sources!!


Server:Non Spring jetty transport   [-Pserver]
	   Tomcat 7                     [tomcat7:run]  http://localhost:9000/java_first_jaxws/services/hello_world?wsdl
	   
	   
Client:Non Spring standard transport    [-Pclient] 
Il client non usa wsdl, justo la SEI compilata HelloWorld.class per capire come generare il SOAP.






=============		jax_rs_basic  [output = xml]  ==================
Implementa un endpoint demo.jaxrs.server.CustomerService.java   annotato jax-rs 2.0  [@Path,@Produces] lanciato con JAXRSServerFactoryBean.
L'esempio implementa jax-rs sub-resource-locator [vedi http://localhost:9000/customerservice/orders/223/products/323]
Client usa apache http-client 
Ambo client e server non sono configurati con Spring.



Server:[-Pserver]   No war!!Non gira in Tomcat. Server lanciato usando JAXRSServerFactoryBean

Client:[-Pclient]   Usa httpclient per generare le requests.


=============		jax_rs_spring_security    ==================
Jax-rs server che gira su tomcat7 e jetty configurato con Spring <jaxrs:server> con  metodi annotati jax-rs ed esposti 
con basic-auth configurata sia con @Secured [spring-security-core] che con <security:global-method-security> in beans.xml
Server gira sy jetty e tomcat7:run.

Ogni request ha assegnato un header "Authorization" con valore "Basic " + base64Encode(name + ":" + password)
Lato server user/pwd sono associati ad un role in beans.xml.
Ogni metodo e' autorizzato per uno o piu ruoli o in beans.xml con <global-method-security > oppure nell' SEI interface con annotazioni CustomerServiceSecured.


Output e' appliction/xml


Server:[-Pserver]   

Client:[-Pclient] Usa httpclient per generare le requests.




=============		jax_rs_basic_https    ==================
Implementa un server  annotato jax-rs 2.0  [@Path,@Produces] lanciato con JAXRSServerFactoryBean ma con Spring configration
ServerConfig.xml configura keyManagers,trustManagers,port del transport jetty con tags <httpj:engine-factory> e <httpj:engine> imponendo l autenticazione del client certificate

Client usa org.apache.cxf.jaxrs.client.WebClient.java [cxf-rt-rs-client] configurando con ClientConfig.xml con tag <http:conduit> il keystore da usare.

Server:[-Pserver]  Lanciato come JAXRSServerFactoryBean, configurato con   <httpj:engine-factory > in ServerConfig.xml

Client:[-Pclient]   org.apache.cxf.jaxrs.client.WebClient configurato con ClientConfig.xml 

Consente di scegliere client authentication, quale certificato usare serverside, quali certificati client autorizzare,etc





=============	jax_rs_content_negotiation	    ==================
Implementa un server  annotato jax-rs 2.0  [@Path,@Produces] lanciato con JAXRSServerFactoryBean
Nessuna configurazione Spring.


2 profili POM:


[-Pserver]Implementa un endpoint CustomerService  annotato jax-rs 2.0  [@Path,@Produces] lanciato con JAXRSServerFactoryBean 


[-Pclient]Lancia client che usa apache HttpClient per effettuare GETs verso l endpoint settando header "Accept" sia application/xml
che application/json

Solo il type definito in CustomerService [@Produces("")] funziona.Se l'header inviato dal client non matcha quello del @Produces
il server ritorna error 6.


=============	java_first_jms	    ==================
SOAP over JMS usando ActiveMQ senza usare configurazione Spring.
A partire da interfaccia java annotatata JAX-WS demo.service.HelloWorld, genera hello.wsdl .
Per partire dal, wsdl vedi jms_spring_config.

java2ws:[-Pserver]
Genera il wsdl hello.wsdl a partire da SEI  demo.service.HelloWorld


Server:[-Pserver]   
Lancia ActiveMQ in ascolto su tcp  61616 
JaxWsServerFactoryBean e' usato per pubblicare l endpoint HelloWorldImpl.java in ascolto sulla queue :
jms:queue:test.cxf.jmstransport.queue?timeToLive=1000&jndiConnectionFactoryName=ConnectionFactory&jndiInitialContextFactory=org.apache.activemq.jndi.ActiveMQInitialContextFactory&jndiURL=tcp://localhost:61616

Client:[-Pclient]   
JaxWsServerFactoryBean e' usato per creare un proxy client e per inviare il messagio jms alla queue :
jms:queue:test.cxf.jmstransport.queue?timeToLive=1000&jndiConnectionFactoryName=ConnectionFactory&jndiInitialContextFactory=org.apache.activemq.jndi.ActiveMQInitialContextFactory&jndiURL=tcp://localhost:61616



=============	jms_spring_config	    ==================
SOAP over JMS a partire dal WSDL [/jms_spring_config/src/main/config/CustomerService.wsdl] usando Spring configuration
 per client e server.
 Genera interfaccia annotata JAX-WS
 Spring usa <jaxws:client> e <jaxws:endpoint> per configurare WS server e client.
Il server non lancia ActiveMQ, semplicemente si connette ad esso.


[phase generate-sources]legge  jms_spring_config/src/main/config/CustomerService.wsdl
cxf-codegen-plugin e' usato per generare jaxb e SEI interface in target/generated-sources
com.example.customerservice.CustomerService.java

[-Pjms.broker] => lancia ActiveMQ invocando activemq-maven-plugin:run  BrokerMojo.execute() in activemq-maven-plugin-5.8.0.jar
Il broker e' istanza org.apache.activemq.broker.BrokerService.java in activemq-broker-5.12.0.jar
Si puo evitare di lanciare il broker se si lancia activemq installato localmente [startmq/stopmq in .bash_profile].

[-Pserver] => esegue polling dei messaggi sulla queue jms:queue:test.queue.
CustomerServiceSpringServer.java usa ClassPathXmlApplicationContext per lanciare  server-applicationContext.xml
I singletons sono nestati:  ActiveMQConnectionFactory => PooledConnectionFactory => ConnectionFactoryFeature => jaxws:endpoint




[-Pclient] =>  invia SOAP over JMS messages verso la queue 
CustomerServiceSpringClient.java usa ClassPathXmlApplicationContext per lanciare client-applicationContext.xml.
I singletons sono nestati:  ActiveMQConnectionFactory => PooledConnectionFactory => jmsConfig =>JMSConfigFeature => ConnectionFactoryFeature => <jaxws:client>
Il client invia header replyDestination per indicare al server dove inviare le risposte.
A quel punto estrae CustomerServiceTester da Spring context che e' iniettato col proxy  <jaxws:client> per invocare i metodi (invio jms payload) dal server.
Il client invia il messaggio con header Reply To=queue://endpoint-out-queue e ascolta x un  certo timeout per il messggio di risposta su tale queue.
Se il timeout scade :java.lang.RuntimeException: Timeout receiving message with correlationId 11f3f0f934794e08931dd87bcd7f2b400000000000000001
	at org.apache.cxf.transport.jms.JMSConduit.sendAndReceiveMessage(JMSConduit.java:236)


=============	jms_queue	    ==================
SOAP over JMS a partire dal WSDL [jms_queue/src/main/config/jms_greeter.wsdl] 
SENZA usare Spring configuration per client e server.
Quindi come jms_spring_config ma senza configurazione Spring.
Genera interfaccia annotata JAX-WS (org.apache.cxf.jms_greeter.JMSGreeterPortType.java) in target/generated-sources/cxf

Queue usata per outbound e' test.cxf.jmstransport.queue
Queue inbound test.cxf.jmstransport.queue_return


Il server non lancia ActiveMQ, semplicemente si connette ad esso.

Dove sono definiti tutti i parametri della queue in, out, etc etc?
Sono in jms_greeter.wsdl nela sezione  <wsdl:port>.

        <wsdl:port binding="tns:JMSGreeterPortBinding" name="GreeterPort">
        	<soap:address location="jms:queue:test.cxf.jmstransport.queue"/>
        	<soapjms:jndiConnectionFactoryName>ConnectionFactory</soapjms:jndiConnectionFactoryName>
            <soapjms:jndiInitialContextFactory>org.apache.activemq.jndi.ActiveMQInitialContextFactory</soapjms:jndiInitialContextFactory>
 			<soapjms:jndiURL>tcp://localhost:61616</soapjms:jndiURL>
        </wsdl:port>
        
        
Profili pom:


[cxf-codegen-plugin] genera jaxb ,sei e proxy a partire al jms_greeter.wsdl in jms_queue/target/generated-sources/cxf.


[-Pjms.broker] => lancia ActiveMQ invocando activemq-maven-plugin:run  BrokerMojo.execute() in activemq-maven-plugin-5.8.0.jar
Il broker e' istanza org.apache.activemq.broker.BrokerService.java in activemq-broker-5.12.0.jar
Si puo evitare di lanciare il broker se si lancia activemq installato localmente [startmq/stopmq in .bash_profile].


[-Pserver] => lancia demo.jms_greeter.server.Server.java che istanzia GreeterJMSImpl e la pubblica Endpoint.publish(null, implementor);
GreeterJMSImpl e' annotata @javax.jws.WebService(wsdlLocation = "file:./src/main/config/jms_greeter.wsdl")
Durante il bootstrap, ReflectionServiceFactoryBean.buildServiceFromWSDL(url) parsa il wsdl e genera tutto il necessario.
In particolare le informazioni riguardanti jms vengono caricati in JMSEndpoint.(EndpointInfo ei, String endpointUri).
Altri parametri permessi ma non usati qui sono per esempio replyToName,priority,timeToLive (vedi http://tools.ietf.org/id/draft-merrick-jms-uri-06.txt)
JMSEndpoint viene poi caricato in JMSConfiguration in JMSConfigFactory.createFromEndpoint() e poi in JMSDestination in JMSTransportFactory.getDestination().
Questa JMSDestination viene storata in org.apache.cxf.endpoint.ServerImpl.
Viene finalmente usata in JMSDestination.activate() dove  JMSDestination.createTargetDestinationListener()  crea PollingMessageListenerContainer viene istanziato e lanciato [ container.start();] .
In PollingMessageListenerContainer.Poller.run() una jms session viene creata, un jms MessageConsumer loopa all infinito consumer.receive(1000).
Quando il consumer riceve un messaggio lo passa listenerHandler ossia a  JMSDestination.onmessage() e da qui a ChainInitiationObserver.onMessage().
Di qui una PhaseInterceptorChain viene creata e il messaggio viene processato da tutti i phase-interceptors incluso ServiceInvokerInterceptor
che fa marshalling messaggio ed invoca metodo implementazione SEI GreeterJMSImpl.java
Il risulato viene messo [per sayHi e' String] in Exchange.outmessgae.content e viene convertito in oggetto jaxb in WrapperClassOutInterceptor.handleMessage() [Object o2 = helper.createWrapperObject(objs);]
Il risultato jaxb e' messo di nuovo Exchange.outmessgae.content e va a prendere il posto del precedente [String].
Il messaggio con la risposta xml e'inviato alla response queue [temp queue creata dal client all invio request o secificata nel wsdl] in MessageSenderEndingInterceptor.handleMessage() => BackChannelConduit.sendExchange() => BackChannelConduit.send() 



Client decide la replyToQueue in JMSConfiguration.getReplyDestination().
A meno che una replyDestinationDest sia specificata new wsdl [<soap:address location="test.cxf.jmstransport.queue_return"/>], una temporary queue e' creata con  session.createTemporaryQueue().




[-Pclient] =>lancia demo.jms_greeter.client.Client.java che usa org.apache.cxf.jms_greeter.JMSGreeterService.java [autogenerata e annotata @WebServiceClient]
per ottenere instanza proxy che connette al server [JMSGreeterPortType] ed invoca i metodi remoti.
Internamente un istanza org.apache.cxf.endpoint.ClientImpl e' cretata , la quale crea una PhaseInterceptorChain in doInvoke().
Al solito PhaseInterceptorChain itera tutti gli interceptors ed invia il jms request in MessageSenderEndingInterceptor.handleMessage().
Sempre nell esecuione questo metodo,JMSConduit.sendAndReceiveMessage() crea una javax.jms.Destination usando <soapjms:replyToName><soapjms:replyToName> nel wsdl, e instanzia un 
MessageListenerContainer in ascolto su tale destination [test.cxf.jmstransport.queue_return].
MessageListenerContainer.start() crea un Consumer su tale queue con un selector che cerca messaggi con JMSCorrelationID simile a quella del messaggio request [JMSCorrelationID LIKE 'ae68f9d399194f629a5b5d5169b617b5%']
e setta JMSConduit come listener di tale consumer.
Il resto e' lo stesso definito in jms_spring_config leggime.txt sezione INVIO-RICEZIONE MESSAGGI.
Il processamento della response avviene in 2 thread coordinati.



=============	jms_pubsub	    ==================

SOAP over JMS a partire dal WSDL [jms_pubsub/src/main/config/jms_greeter.wsdl] 
SENZA usare Spring configuration per client e server.
Quindi come jms_spring_config ma senza configurazione Spring.
Genera interfaccia annotata JAX-WS (org.apache.cxf.jms_greeter.JMSGreeterPortType.java) in target/generated-sources/cxf

Dato che la request va su un topic con piu subscribers, tutti i metodi definiti in jms_greeter.wsdl sono "onenway" [greetMeOneWay()]. 
Altrimenti non si saprebbe quale delle multiple response si dovrebbe usare ...

Topic: jms:topic:test.cxf.jmstransport.topic


Dove sono definiti tutti i parametri del topic ?
Sono in jms_greeter.wsdl nela sezione  <wsdl:port>.

        <wsdl:port binding="tns:JMSGreeterPortBinding" name="GreeterPort">
        	<soap:address location="jms:topic:test.cxf.jmstransport.topic"/>
        	<soapjms:jndiConnectionFactoryName>ConnectionFactory</soapjms:jndiConnectionFactoryName>
            <soapjms:jndiInitialContextFactory>org.apache.activemq.jndi.ActiveMQInitialContextFactory</soapjms:jndiInitialContextFactory>
 			<soapjms:jndiURL>tcp://localhost:61616</soapjms:jndiURL>
        </wsdl:port>
        
Profili pom:

[cxf-codegen-plugin] genera jaxb ,sei e proxy a partire al jms_greeter.wsdl in jms_queue/target/generated-sources/cxf.


[-Pserver] =>come per jms_queue , ma con la differenza che dopo ServiceInvokerInterceptor non c'e' ne WrapperClassOutInterceptor ne MessageSenderEndingInterceptor
quindi una volta invocato l endpoint [GreeterJMSImpl], non si cerca di inviare nullo indietro al client.

[-Pclient] => come per jms_queue , ma con la differenza che MessageSenderEndingInterceptor.handleMessage() =>JMSConduit.sendExchange() controlla se l'invocazione e'
oneway [exchange.isOneWay()] ed in tal caso chiama  JMSConduit.sendMessage() INVECE di JMSConduit.sendAndReceiveMessage().
In questo caso si genera un JMSSender che invia il messaggio, ma nessun consumer,listerners,phasechain, etc per processare la risposta.


===============  jaxws_async   ====================
SOAP over Http "asincrono" a partire dal WSDL [jaxws_async/wsdl/hello_world_async.wsdl] usando Spring configuration [<jaxws:endpoint] per il server.
Lato client si usano le classi/proxy generate dal wsdl.
 Genera interfaccia annotata JAX-WS
Spring  <jaxws:endpoint> per configurare WS server .
Proxy generato da cxf-codegen-plugin  [org.apache.hello_world_async_soap_http.SOAPService] per il client  client.

wsdl:  http://127.0.0.1:8080/jaxws_async/services//SoapContext?wsdl


[cxf-codegen-plugin] genera jaxb ,sei e proxy a partire dal jaxws_async/wsdl/hello_world_async.wsdl con il goal wsdl2java.
Da notare che nel pom.xml il goal wsdl2java e' invocato con il parametro extra :-b ${basedir}/wsdl/async_binding.xml
Se si lancia generate-sources senza tale extra param, gli extra/asynch methods nella SEI non vengono generati.



[tomcat7-maven-plugin] => non usare -Pserver perche usa Endpoint.publish(address, implementor).
Lancia CXFServlet che lancia Spring che legge WEB-INF/cxf-servlet.xml ed instanzia Spring [CXFServlet.createSpringContext() ]
L'endpoint e' configurato come descritto da Spring-bean-setup.txt.


[-Pclient]=>lancia demo.hw.client.Client.java il quale esegue i tre tipi di chiamata [sincrona, asinc-polling,asinc-callback] che
 atterrano sullo stesso metodo lato server [String greetMeSometime(String me) ].

===============  Throttling   ====================

SOAP over http a partire da wsdl ma usando due features:

cxf-rt-features-throttling => permette di ritardare (quindi diminuire il throughput) una request [ThrottlingInterceptor/ThrottlingManager]

cxf-rt-features-metrics    => cattura metriche [endpoint/customers] che permettono di effettuare decisioni in ThrottlingManager .

Le metriche sono pubblicate in jmx console [service:jmx:rmi:///jndi/rmi://localhost:9913/jmxrmi]

Per ogni request una ThrottleResponse e' generata ed in base ad essa si setta sulla response:

delay in ms
responseCode
errorMessage
responseHeaders


[cxf-codegen-plugin] genera jaxb ,sei e proxy in throttling/target/generated-sources/cxf a partire dal throttling/src/main/config/hello_world.wsdl con il goal wsdl2java.


[-Pserver] => lancia demo.throttling.server.Server.java che usa  Endpoint.publish() per lanciare GreeterImpl.java endpoint su jetty.
Da notare come CodahaleMetricsProvider.setupJMXReporter(b, registry) 

[[-Pclient]=>lancia demo.throttling.client.Client.java il quale esegue su thread separati chiamate a raffica () con diverse authorizations (Tom,Rob,Vince,Malcolm)
 atterrano sullo stesso metodo lato server [String greetMeSometime(String me) ] ma che sono throttled in diverso modo [PremiumCustomer,PreferredCustomer,RegularCustomer]



===============  WS-Addressing   ====================

SOAP over http a partire da wsdl [ws_addressing/src/main/resources/hello_world_addr.wsdl] usando WS-addressing [https://www.w3.org/Submission/ws-addressing/]
dove response del server e' diretta verso un endpoint indicato dal soap header "ReplyTo" e NON nella stessa connessione client.


[cxf-codegen-plugin] genera jaxb ,sei e proxy in ws_addressing/target/generated-sources/cxf a partire dal ws_addressing/src/main/resources/hello_world_addr.wsdl con il goal wsdl2java.


[-Pserver] => lancia demo.ws_addressing.server.Server.java che usa  Endpoint.publish() per lanciare GreeterImpl.java endpoint su jetty.
Prima di lanciare il server , il Bus viene creato usando ws_addressing/src/main/resources/server.xml per configurare ws_addressing.

[-Pclient] => lancia demo.ws_addressing.client.Client.java che usa  SOAPService (@WebClient generato da cxf-codegen-plugin) per ottenere un Greeter proxy 
per invocare il webservice.
Prima di lanciare il server , il Bus viene creato usando ws_addressing/src/main/resources/client.xml per configurare ws_addressing.
Viene aggiunto il SOAP header: 

<soap:Header>
<Action xmlns="http://www.w3.org/2005/08/addressing">http://apache.org/hello_world_soap_http/Greeter/sayHiRequest</Action>
<MessageID xmlns="http://www.w3.org/2005/08/addressing">urn:uuid:78606155-6621-426a-af12-cd30dc94a0cd</MessageID>
<To xmlns="http://www.w3.org/2005/08/addressing">http://localhost:9000/SoapContext/SoapPort</To>
<ReplyTo xmlns="http://www.w3.org/2005/08/addressing"><Address>http://localhost:9990/decoupled_endpoint</Address></ReplyTo>
</soap:Header>



===============  WS-Eventing   ====================
E' un framework definito da W3C specs [https://www.w3.org/Submission/WS-Eventing/] che permette clients di creare con messaggi soap
delle "subscriptions" lato server per determinati eventi.

Una subscription e' definita da:
1)Un endpoint dove il server deve inviare le notifice
2)un filter che definisce quali sono gli eventi che scatenano le notifiche.
3)una expiration date.


===============  WS-Notification   ====================
WS-notification e' un framework definito da OASIS  specs [https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wsn] che permette:

These specifications provide a standardized way for a Web service, or other entity, to disseminate information to a set of other Web services, 
without having to have prior knowledge of these other Web Services. They can be thought of as defining "Publish/Subscribe for Web services".

Le specifiche definiscono:

WS-BaseNotification 
WS-BrokeredNotification 
WS-Topics 

Assomiglia molto a ws_eventing con differenza che:

1)lato server c'e' JMS e le notifiche vengono inviate ad un topic specificato dal subscriber [we_eventing non c'e' jms lato server]
2)gli eventi che scatenano le notifice vengono inviati via soap http con uno schema prefissato [ws_eventing eventi sono generati lato server con api]
3)le subscriptions non hanno ne filtri ne enddate [al contrario di ws-eventing]



 

