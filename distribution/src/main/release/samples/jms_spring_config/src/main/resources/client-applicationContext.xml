<?xml version="1.0" encoding="UTF-8"?>
<!--
        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements. See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version
        2.0 (the "License"); you may not use this file except in compliance
        with the License. You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0 Unless required by
        applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
        CONDITIONS OF ANY KIND, either express or implied. See the License for
        the specific language governing permissions and limitations under the
        License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
<<<<<<< HEAD
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd http://cxf.apache.org/jaxws
		http://cxf.apache.org/schemas/jaxws.xsd">
	
	<!-- Make sure to use ConnectionPooling to achieve a good performance. Do not forget
		the destroy-method as else the JVM will hang on shutdown -->
=======
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd         
		http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
		http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- Make sure to use ConnectionPooling to achieve a good performance.
		 Do not forget the destroy-method as else the JVM will hang on shutdown -->
>>>>>>> 707fa4f3c3f3aa40979e57468a9ac3eb3102a71f
	<bean id="jmsConnectionFactory" class="org.apache.activemq.jms.pool.PooledConnectionFactory" destroy-method="stop">
		<property name="connectionFactory">
			<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://localhost:61616"/>
			</bean>
		</property>
	</bean>


	<bean id="jmsConfig" class="org.apache.cxf.transport.jms.JMSConfiguration"
		p:connectionFactory-ref="jmsConnectionFactory" 
	    p:replyDestination="endpoint-out-queue"
		p:targetDestination="endpoint-in-queue"
	    p:receiveTimeout="100000"
		p:explicitQosEnabled="true"
	    p:deliveryMode="2"
	    p:priority="2"
		p:timeToLive="1000000"

		p:requestURI="jms:queue:endpoint-in-queue"
		p:sessionTransacted="false"
		p:messageType="byte"
		>
	</bean>
<!--  -->
	 <!-- JMSConfiguration.replyDestination  dove il client vuole ricevere le risposte-->
	 <!-- JMSConfiguration.receiveTimeout numero millisec il client aspetta per la risposta prima di andare in timeout-->
	 <!-- JMSConfiguration.deliveryMode(JMS_Header:1=non mersistent, 2=persistent ), priority, timeToLive  OCCORRE SETTARE explicitQosEnabled = true[vedi JMSSender.sendMessage()]-->
	 <!-- JMSConfiguration.requestURI aggiunge SOAPJMS_requestURI property ai messaggi JMS.Senza il lato server throws org.apache.cxf.binding.soap.SoapFault: Missing RequestURI. ]-->
	 
	 
	
	<jaxws:client id="customerService" address="jms:queue:endpoint-in-queue" serviceClass="com.example.customerservice.CustomerService" >
		<jaxws:features>
			<bean class="org.apache.cxf.feature.LoggingFeature"/>
			
			<!-- We use the feature to inject the ConnectionFactory. This approach also allows
				to publish a java first service as we need no jms config in the wsdl. Alternatively
				the ConnectionFactory can also be looked up using jndi like shown in the jms_queue
				example -->
			<bean class="org.apache.cxf.transport.jms.ConnectionFactoryFeature">
				<constructor-arg ref="jmsConnectionFactory"/>
			</bean>
		   <bean class="org.apache.cxf.transport.jms.JMSConfigFeature" p:jmsConfig-ref="jmsConfig" />		
		</jaxws:features>
	</jaxws:client>
	
	<bean id="tester" class="com.example.customerservice.client.CustomerServiceTester">
		<property name="customerService" ref="customerService"/>
	</bean>
</beans>
